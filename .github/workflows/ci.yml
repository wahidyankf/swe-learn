name: CI

on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']

permissions:
  actions: read
  contents: read

defaults:
  run:
    shell: bash -l {0}

jobs:
  main:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Install SDKMAN and Java tools
      - name: Install SDKMAN and Java tools
        run: |
          curl -s "https://get.sdkman.io" | bash
          source "$HOME/.sdkman/bin/sdkman-init.sh"
          sdk install java 21.0.2-tem
          sdk use java 21.0.2-tem
          sdk install maven 3.9.9
          sdk use maven 3.9.9
          echo "SDKMAN_DIR=$HOME/.sdkman" >> $GITHUB_ENV
          echo "JAVA_HOME=$HOME/.sdkman/candidates/java/current" >> $GITHUB_ENV
          echo "M2_HOME=$HOME/.sdkman/candidates/maven/current" >> $GITHUB_ENV
          echo "PATH=$HOME/.sdkman/candidates/java/current/bin:$HOME/.sdkman/candidates/maven/current/bin:$PATH" >> $GITHUB_ENV
        shell: bash

      # Set up Java cache
      - uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: Linux-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            Linux-maven-

      # Install google-java-format
      - name: Install google-java-format
        run: |
          curl -L https://github.com/google/google-java-format/releases/download/v1.17.0/google-java-format-1.17.0-all-deps.jar -o google-java-format.jar
          chmod +x google-java-format.jar

      # Set up Python
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      # Install Poetry
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.7.1
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      # Set up Go
      - uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache: true

      # Install Go dependencies
      - name: Install Go dependencies
        run: |
          cd libs/go-hello-libs && go mod tidy
          cd ../../apps/go-hello && go mod tidy

      # Cache node_modules
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - run: npm ci --legacy-peer-deps
      - uses: nrwl/nx-set-shas@v4

      # Install xmllint
      - name: Install xmllint
        run: sudo apt-get update && sudo apt-get install -y libxml2-utils

      # Format check Java and XML files
      - name: Check Java formatting
        run: |
          find . -name "*.java" -not -path "*/target/*" -exec java -jar google-java-format.jar --set-exit-if-changed {} \;

      - name: Check XML formatting
        run: |
          find . -name "*.xml" -not -path "*/target/*" -exec xmllint --format --output '{}' '{}' \;
          git diff --exit-code

      # Install OCaml system dependencies
      - name: Install OCaml system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y bubblewrap gcc make g++ rsync git m4 unzip pkg-config
          sudo apt-get install -y musl-tools mercurial libev-dev

      # Download and install OPAM
      - name: Download and install OPAM
        run: |
          wget https://github.com/ocaml/opam/releases/download/2.1.6/opam-2.1.6-x86_64-linux
          sudo cp opam-2.1.6-x86_64-linux /usr/local/bin/opam
          sudo chmod a+x /usr/local/bin/opam

      # Initialize OPAM
      - name: Initialize OPAM
        run: |
          opam init --bare -ny
          opam switch create . ocaml-base-compiler.4.14.1 -y
          eval $(opam env)

      # Install base OCaml dependencies
      - name: Install base OCaml dependencies
        run: |
          opam install dune dream yojson re alcotest ocamlformat --yes --assume-depexts

      # Install project OCaml dependencies
      - name: Install project OCaml dependencies
        run: |
          npx nx affected --target=install --projects=ocaml-hello-libs,ocaml-hello

      # Format check OCaml files
      - name: Check OCaml formatting
        run: |
          npx nx affected --target=format --projects=ocaml-hello-libs,ocaml-hello

      # Build and test Java projects
      - name: Build and install Java libraries
        run: |
          npx nx affected --target=install --projects=java-hello-libs

      - name: Build and test Java applications
        run: |
          npx nx affected --target=build --projects=java-hello

      # Run build, lint, typecheck, and test on affected projects
      - run: npx nx affected --target=build --parallel=3
      - run: npx nx affected --target=lint --parallel=3
      - run: npx nx affected --target=typecheck --parallel=3
      - run: npx nx affected --target=test --parallel=3
